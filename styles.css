import requests
from requests.exceptions import RequestException, Timeout, HTTPError, ConnectionError

def call_api_with_retries(api_url, payload, max_retries=3):
    for attempt in range(1, max_retries + 1):
        try:
            response = requests.post(api_url, json=payload, timeout=5)

            # Check for HTTP errors
            response.raise_for_status()

            # Check if response has expected content (modify this check as needed)
            if response.status_code == 200 and response.json():
                return {"success": True, "data": response.json()}
            else:
                return {"success": False, "message": f"Invalid response format (Attempt {attempt})"}

        except (Timeout, ConnectionError):
            msg = f"Timeout or connection error (Attempt {attempt})"
        except HTTPError:
            msg = f"HTTP error: {response.status_code} (Attempt {attempt})"
        except ValueError:
            msg = f"Invalid JSON in response (Attempt {attempt})"
        except RequestException as e:
            msg = f"Request failed: {str(e)} (Attempt {attempt})"
        except Exception as e:
            msg = f"Unexpected error: {str(e)} (Attempt {attempt})"

        # Log the error message or return immediately if you want short-circuit behavior
        print(msg)

    return {"success": False, "message": "API call failed after 3 attempts"}
