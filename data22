import pandas as pd

# Sample DataFrame (simulating Excel data)
df = pd.DataFrame({
    'type': [None, 'Admin', 'User', 'Manager'],
    'name': ['John', 'Alice', None, 'Bob'],
    'country': ['USA', 'UK', 'Canada', None]
})

# Clean the DataFrame
cleaned_df = df.fillna('').astype(str).applymap(lambda x: x.strip().lower())

# Sample API data
extracted_data = [
    {'type': 'Admin', 'name': 'John', 'country': 'USA'},
    {'type': 'User', 'name': 'Alice', 'country': 'UK'},
    {'type': '', 'name': '', 'country': 'Canada'},  # Intentional mismatch
]

# Debug unmatched rows
for data in extracted_data:
    data_type = str(data.get('type', '')).strip().lower()
    data_name = str(data.get('name', '')).strip().lower()
    data_country = str(data.get('country', '')).strip().lower()

    # Create match condition
    match_condition = (
        (cleaned_df['type'] == data_type) &
        (cleaned_df['name'] == data_name) &
        (cleaned_df['country'] == data_country)
    )

    if not match_condition.any():
        print("\n‚ùå Mismatch found:")
        print(f"üîé API Data: {data}")

        # Find potential matches based on name and country
        potential_matches = cleaned_df[
            (cleaned_df['name'] == data_name) | (cleaned_df['country'] == data_country)
        ]

        # Print details for debugging
        for idx, row in potential_matches.iterrows():
            print(f"\nüìÑ Excel Row: {row.to_dict()}")

            print("\nüî¨ Comparison:")
            print(f"Type    - Excel: {repr(row['type'])} | API: {repr(data_type)}")
            print(f"Name    - Excel: {repr(row['name'])} | API: {repr(data_name)}")
            print(f"Country - Excel: {repr(row['country'])} | API: {repr(data_country)}")
