    // Keep track of indices for the overall columns
    int overallExactMatchColumn = columnIndex;
    int overallMissingColumn = columnIndex + 1;

    // Create the overall columns
    headerRow.createCell(overallExactMatchColumn, CellType.STRING).setCellValue("Overall ExactMatch");
    headerRow.createCell(overallMissingColumn, CellType.STRING).setCellValue("Overall Missing");





  overallExactMatchCount += exactMatchCount;
        overallMissingCount += missingCount;
    }
}

// Write the overall ExactMatch and Missing counts in the new columns
row.createCell(overallExactMatchColumn, CellType.NUMERIC).setCellValue(overallExactMatchCount);
row.createCell(overallMissingColumn, CellType.NUMERIC).setCellValue(overallMissingCount);





   row.createCell(newHeaderIndices.get(0), CellType.NUMERIC).setCellValue(exactMatchCount);
        row.createCell(newHeaderIndices.get(1), CellType.NUMERIC).setCellValue(missingCount);
    



import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;
import java.util.regex.Pattern;

public class ExcelColumnProcessor {

    public static void main(String[] args) {
        // Path to the Excel file
        String excelFilePath = "input.xlsx";
        String outputFilePath = "output.xlsx";

        // Define patterns to search for
        List<String> columnPatterns = List.of("common\\|doc\\d+", "share\\|doc\\d+", "will\\|doc\\d+");

        try (FileInputStream fis = new FileInputStream(excelFilePath);
             Workbook workbook = new XSSFWorkbook(fis)) {

            // Read the first sheet from the Excel file
            Sheet sheet = workbook.getSheetAt(0);

            // Identify relevant columns for each pattern
            Row headerRow = sheet.getRow(0);
            if (headerRow == null) {
                System.out.println("Header row is missing.");
                return;
            }

            // Map pattern to list of column indices
            Map<String, List<Integer>> patternColumnMap = findRelevantColumns(headerRow, columnPatterns);

            // Extend headers with new columns for each pattern
            int originalColumnCount = headerRow.getLastCellNum();
            Map<String, List<String>> newHeadersMap = createNewHeaders(columnPatterns);
            writeHeaders(headerRow, newHeadersMap);

            // Iterate through all rows starting from the second row (data rows)
            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row != null) {
                    // Process each pattern separately
                    int newColumnStart = originalColumnCount;
                    for (String pattern : columnPatterns) {
                        List<Integer> relevantColumns = patternColumnMap.getOrDefault(pattern, Collections.emptyList());
                        String[] values = readRow(row, relevantColumns);

                        // Count ExactMatch and Missing entries
                        long exactMatchCount = Arrays.stream(values)
                                .filter(value -> value.startsWith("ExactMatch"))
                                .count();

                        long missingCount = Arrays.stream(values)
                                .filter(value -> value.startsWith("Missing"))
                                .count();

                        // Write counts back to the row
                        writeRow(row, exactMatchCount, missingCount, newColumnStart);
                        newColumnStart += 2; // Move to the next pair of new columns
                    }
                }
            }

            // Write the updated workbook to a new file
            try (FileOutputStream fos = new FileOutputStream(outputFilePath)) {
                workbook.write(fos);
            }

            System.out.println("Processing complete. Updated file written to: " + outputFilePath);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Helper method to identify relevant columns for each pattern
    private static Map<String, List<Integer>> findRelevantColumns(Row headerRow, List<String> patterns) {
        Map<String, List<Integer>> patternColumnMap = new HashMap<>();
        Map<String, Pattern> compiledPatterns = new HashMap<>();

        // Compile patterns for efficiency
        for (String pattern : patterns) {
            compiledPatterns.put(pattern, Pattern.compile(pattern));
        }

        // Check each column header against all patterns
        for (int i = 0; i < headerRow.getLastCellNum(); i++) {
            Cell cell = headerRow.getCell(i, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
            String header = cell.toString();

            for (String pattern : patterns) {
                if (compiledPatterns.get(pattern).matcher(header).matches()) {
                    patternColumnMap.computeIfAbsent(pattern, k -> new ArrayList<>()).add(i);
                }
            }
        }

        return patternColumnMap;
    }

    // Helper method to create new headers for each pattern
    private static Map<String, List<String>> createNewHeaders(List<String> patterns) {
        Map<String, List<String>> newHeadersMap = new HashMap<>();
        for (String pattern : patterns) {
            String prefix = pattern.split("\\\\|")[0]; // Extract prefix like "common", "share", etc.
            List<String> newHeaders = List.of(prefix + " ExactMatch", prefix + " Missing");
            newHeadersMap.put(pattern, newHeaders);
        }
        return newHeadersMap;
    }

    // Helper method to write the new headers
    private static void writeHeaders(Row headerRow, Map<String, List<String>> newHeadersMap) {
        int columnIndex = headerRow.getLastCellNum();
        for (List<String> newHeaders : newHeadersMap.values()) {
            for (String newHeader : newHeaders) {
                Cell cell = headerRow.createCell(columnIndex++, CellType.STRING);
                cell.setCellValue(newHeader);
            }
        }
    }

    // Helper method to read values from relevant columns in a row
    private static String[] readRow(Row row, List<Integer> relevantColumns) {
        String[] values = new String[relevantColumns.size()];
        for (int i = 0; i < relevantColumns.size(); i++) {
            int colIndex = relevantColumns.get(i);
            Cell cell = row.getCell(colIndex, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
            values[i] = cell.toString();
        }
        return values;
    }

    // Helper method to write counts to the row
    private static void writeRow(Row row, long exactMatchCount, long missingCount, int columnStart) {
        Cell exactMatchCell = row.createCell(columnStart, CellType.NUMERIC);
        exactMatchCell.setCellValue(exactMatchCount);

        Cell missingCell = row.createCell(columnStart + 1, CellType.NUMERIC);
        missingCell.setCellValue(missingCount);
    }
}



 // Retrieve the new header positions for "ExactMatch" and "Missing" for this pattern
    List<String> headerPositions = newHeadersMap.get(pattern);
    
    // Assuming the header map contains keys like "Common ExactMatch" and "Common Missing"
    // and corresponding positions as the column indices where the counts should be written.

    // Write counts to the corresponding new columns for the current pattern
    // headerPositions.get(0) is for ExactMatch count column
    // headerPositions.get(1) is for Missing count column
    if (headerPositions != null && headerPositions.size() == 2) {
        row.createCell(Integer.parseInt(headerPositions.get(0))).setCellValue(exactMatchCount);
        row.createCell(Integer.parseInt(headerPositions.get(1))).setCellValue(missingCount);
    }

private static Map<String, List<Integer>> createNewHeaders(Row headerRow, List<String> patterns) {
    Map<String, List<Integer>> newHeadersMap = new HashMap<>();
    int columnIndex = headerRow.getLastCellNum(); // Start after existing headers

    for (String pattern : patterns) {
        String prefix = pattern.split("\\\\|")[0]; // Extract prefix like "common", "share", etc.

        // Create headers for "ExactMatch" and "Missing" and store their indices
        List<Integer> newHeaderIndices = new ArrayList<>();

        Cell exactMatchCell = headerRow.createCell(columnIndex++, CellType.STRING);
        exactMatchCell.setCellValue(prefix + " ExactMatch");
        newHeaderIndices.add(exactMatchCell.getColumnIndex());

        Cell missingCell = headerRow.createCell(columnIndex++, CellType.STRING);
        missingCell.setCellValue(prefix + " Missing");
        newHeaderIndices.add(missingCell.getColumnIndex());

        // Map pattern to its newly created header indices
        newHeadersMap.put(pattern, newHeaderIndices);
    }

    return newHeadersMap;
}
