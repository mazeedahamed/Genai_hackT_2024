import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class ExcelFormulaUpdater {

    public static void main(String[] args) throws IOException {
        // File paths
        String filePath = "your-file-path.xlsx"; // Path to your Excel file

        // Variables for sheet names
        String inputSheetName = "Test Execution Results"; // Source sheet with data
        String outputSheetName = "Status Report";         // Target sheet to write the formula

        // Map of headers and corresponding output cells
        Map<String, String> headerToCellMap = new HashMap<>();
        headerToCellMap.put("Overall ExactMatch", "D3");    // Header and output cell for Overall ExactMatch
        headerToCellMap.put("Common Exact Data", "D4");     // Header and output cell for Common Exact Data

        // Open the workbook from the existing file
        FileInputStream fis = new FileInputStream(filePath);
        Workbook workbook = new XSSFWorkbook(fis);

        // Get input and output sheets
        Sheet inputSheet = workbook.getSheet(inputSheetName);
        Sheet outputSheet = workbook.getSheet(outputSheetName);

        if (inputSheet == null || outputSheet == null) {
            throw new IllegalArgumentException("Input or Output sheet not found in the workbook.");
        }

        // Fixed last row number
        int lastRowNum = 9430;

        // Process each header and update the corresponding cell in the output sheet
        for (Map.Entry<String, String> entry : headerToCellMap.entrySet()) {
            String header = entry.getKey();
            String outputCellReference = entry.getValue();

            // Determine the column letter dynamically for the header in the input sheet
            String columnLetter = getColumnLetterFromSheet(inputSheet, header);

            if (columnLetter == null) {
                throw new IllegalArgumentException("Header not found: " + header + " in sheet: " + inputSheetName);
            }

            // Generate the formula with the fixed last row number
            String formula = String.format(
                    "SUMIF('%s'!%s3:%s%d, \"False\", '%s'!%s3:%s%d)",
                    inputSheetName, "BQ", "BQ", lastRowNum, // Comparison column is fixed (BQ)
                    inputSheetName, columnLetter, columnLetter, lastRowNum);

            // Parse outputCellReference to row and column indices
            int outputRowIndex = Integer.parseInt(outputCellReference.replaceAll("[^0-9]", "")) - 1; // Convert Excel row to zero-based index
            int outputColumnIndex = outputCellReference.replaceAll("[^A-Za-z]", "").charAt(0) - 'A'; // Convert Excel column to zero-based index

            // Write the formula to the specified cell in the output sheet
            Row outputRow = outputSheet.getRow(outputRowIndex);
            if (outputRow == null) {
                outputRow = outputSheet.createRow(outputRowIndex);
            }
            Cell cell = outputRow.createCell(outputColumnIndex, CellType.FORMULA);
            cell.setCellFormula(formula);
        }

        // Save the updated workbook to a file
        FileOutputStream fos = new FileOutputStream(filePath);
        workbook.write(fos);

        System.out.println("Formulas added to the " + outputSheetName + " sheet.");
        workbook.close();
        fis.close();
    }

    // Helper method to find the column letter in a specific sheet
    private static String getColumnLetterFromSheet(Sheet sheet, String headerName) {
        Row headerRow = sheet.getRow(0); // Assuming headers are in the first row
        if (headerRow != null) {
            for (int i = 0; i < headerRow.getLastCellNum(); i++) {
                Cell cell = headerRow.getCell(i, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                if (headerName.equals(cell.toString())) {
                    return columnIndexToLetter(i); // Convert index to Excel-style letter
                }
            }
        }
        return null; // Return null if header not found
    }

    // Helper method to convert column index to Excel-style letter
    private static String columnIndexToLetter(int columnIndex) {
        StringBuilder columnLetter = new StringBuilder();
        while (columnIndex >= 0) {
            columnLetter.insert(0, (char) ('A' + (columnIndex % 26)));
            columnIndex = (columnIndex / 26) - 1;
        }
        return columnLetter.toString();
    }
}
