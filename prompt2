import pandas as pd
import re

def extract_inside_data(symbol):
    match = re.search(r'\((.*?)\)', symbol)
    return match.group(1) if match else None

def count_matched_fields(actual_values, ground_truth):
    return sum(1 for col in actual_values if actual_values[col] and ground_truth[col] in actual_values[col])

# Load Excel file
df = pd.read_excel("your_file.xlsx")

# Step 1: Filter rows starting with "Duplicate("
df["inside_data"] = df["Symbol"].apply(lambda x: extract_inside_data(x) if x.startswith("Duplicate(") else x)

duplicates_df = df[df["Symbol"].str.startswith("Duplicate(")]
inside_df = df[~df["Symbol"].str.startswith("Duplicate(")]

# Step 2: Group by inside_data and count occurrences
grouped = df.groupby("inside_data").size().reset_index(name="total_occurrences")

# Step 3: Extract ground truth values and calculate matched-inside-data
inside_df["matched_count"] = inside_df.apply(lambda row: count_matched_fields(
    {"Actual Description": row["Actual Description"],
     "Actual Date": row["Actual Date"],
     "Actual Quantity": row["Actual Quantity"]},
    {"Actual Description": row["Description"],
     "Actual Date": row["Date"],
     "Actual Quantity": row["Quantity"]}), axis=1)

# Step 4: Calculate duplicate matched records
duplicates_df["matched_count"] = duplicates_df.apply(lambda row: count_matched_fields(
    {"Actual Description": row["Actual Description"],
     "Actual Date": row["Actual Date"],
     "Actual Quantity": row["Actual Quantity"]},
    {"Actual Description": inside_df.loc[inside_df["inside_data"] == row["inside_data"], "Description"].values[0],
     "Actual Date": inside_df.loc[inside_df["inside_data"] == row["inside_data"], "Date"].values[0],
     "Actual Quantity": inside_df.loc[inside_df["inside_data"] == row["inside_data"], "Quantity"].values[0]}), axis=1)

# Step 5: Determine the best-matched row
for inside_value in inside_df["inside_data"].unique():
    matched_inside = inside_df.loc[inside_df["inside_data"] == inside_value, "matched_count"].values[0]
    duplicate_matches = duplicates_df.loc[duplicates_df["inside_data"] == inside_value, "matched_count"]
    
    if not duplicate_matches.empty and duplicate_matches.max() > matched_inside:
        best_match_row = duplicates_df.loc[duplicates_df["inside_data"] == inside_value].nlargest(1, "matched_count")
        inside_df.loc[inside_df["inside_data"] == inside_value, ["Actual Description", "Actual Date", "Actual Quantity"]] = \
            best_match_row[["Actual Description", "Actual Date", "Actual Quantity"]].values

# Save the updated dataframe to a new Excel file
inside_df.to_excel("updated_data.xlsx", index=False)
