import pandas as pd
from rapidfuzz import fuzz
from collections import defaultdict

# Load all sheets
excel_file = "your_file.xlsx"  # Replace with actual file path
sheets = pd.read_excel(excel_file, sheet_name=None)

# Sheet to process
sheet_to_group = "Sheet1"
df = sheets[sheet_to_group]

# Similarity threshold
SIMILARITY_THRESHOLD = 80

# Initialize columns
df['group_name'] = None
df['group_number'] = None
df['score'] = None

# Grouping logic per Account no
for account_no, group_df in df.groupby('Account no'):
    print(f"\nüîç Processing Account no: {account_no}")
    
    # Work on copy
    temp_df = group_df.copy()
    temp_df = temp_df[temp_df['Party name'].notna() & (temp_df['Party name'].str.strip() != '')]
    names = temp_df['Party name'].tolist()
    indices = temp_df.index.tolist()
    
    # Skip if fewer than 1
    if not names:
        continue

    # Precompute all pairwise scores
    n = len(names)
    pair_scores = defaultdict(dict)
    for i in range(n):
        for j in range(i+1, n):
            score = fuzz.token_set_ratio(names[i], names[j])
            pair_scores[i][j] = score
            pair_scores[j][i] = score

    grouped = set()
    group_num = 1

    while len(grouped) < n:
        best_candidate = None
        best_matches = []
        best_match_count = -1
        best_total_score = -1

        print(f"\nüîÑ Looking for best candidate in group {group_num}...")

        for i in range(n):
            if i in grouped:
                continue
            matches = []
            total_score = 0
            for j in range(n):
                if j != i and j not in grouped:
                    score = pair_scores[i].get(j, 0)
                    if score >= SIMILARITY_THRESHOLD:
                        matches.append(j)
                        total_score += score
            match_count = len(matches)
            match_names = [names[j] for j in matches]
            print(f"  ‚û§ Candidate: '{names[i]}' ‚Üí Matches: {match_names} (Count: {match_count}, Score: {total_score})")

            if (match_count > best_match_count) or (
                match_count == best_match_count and total_score > best_total_score):
                best_candidate = i
                best_matches = matches
                best_match_count = match_count
                best_total_score = total_score

        current_group = [best_candidate] + best_matches
        group_name = names[best_candidate]
        print(f"\n‚úÖ Selected Group {group_num} Name: '{group_name}'")
        print("   ‚Üí Group Members:")
        for idx in current_group:
            print(f"     ‚Ä¢ {names[idx]}")

        for idx in current_group:
            row_idx = indices[idx]
            name = names[idx]
            score = 100 if name == group_name else fuzz.token_set_ratio(name, group_name)
            df.loc[row_idx, 'group_name'] = group_name
            df.loc[row_idx, 'group_number'] = group_num
            df.loc[row_idx, 'score'] = score
            grouped.add(idx)

        group_num += 1

# Summary: number of groups per account
summary_df = df[['Account no', 'group_number']].drop_duplicates()
group_counts = summary_df.groupby('Account no')['group_number'].nunique().reset_index()
group_counts.columns = ['Account no', 'number_of_groups']

# Save all sheets back
sheets[sheet_to_group] = df
sheets['Group Summary'] = group_counts

with pd.ExcelWriter("grouped_output_with_all_sheets.xlsx", engine='openpyxl') as writer:
    for sheet_name, sheet_df in sheets.items():
        sheet_df.to_excel(writer, sheet_name=sheet_name, index=False)

print("\n‚úÖ Grouping complete and saved to 'grouped_output_with_all_sheets.xlsx'")
