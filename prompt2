import pandas as pd

# Load the Excel file
file_path = 'your_file.xlsx'
df = pd.read_excel(file_path)

# Replace blanks and zeros with NaN for proper null counting
df.replace({"": None, 0: None}, inplace=True)

# Columns to check for missing values
columns_to_check = ['name', 'data', 'age', 'college']

# Columns to extract for first occurrence
status_columns = ['status_age', 'status_data', 'status_name', 'status_college']

### Step 1: Identify the column with the least nulls for each symbol
def get_column_with_least_nulls(df, symbol):
    subset = df[df['symbol'] == symbol]  # Filter rows for this symbol
    null_counts = subset[columns_to_check].isnull().sum()  # Count nulls per column
    return null_counts.idxmin()  # Return column with the least nulls

# Store symbol-wise best column
symbol_least_null_column = {symbol: get_column_with_least_nulls(df, symbol) for symbol in df['symbol'].unique()}

### Step 2: Extract first occurrence values
def get_first_occurrence_values(df, symbol):
    subset = df[df['symbol'] == symbol]  # Get rows for this symbol
    first_row = subset.iloc[0]  # First occurrence row
    return first_row[status_columns]  # Extract status values

# Dictionary to store extracted status values for each symbol
symbol_first_values = {symbol: get_first_occurrence_values(df, symbol) for symbol in df['symbol'].unique()}

### Step 3: Update the best row (least nulls) with extracted values
df['duplicate'] = False  # Add a duplicate flag

for symbol in df['symbol'].unique():
    subset = df[df['symbol'] == symbol]  # Get rows for the symbol
    
    if not subset.empty:
        # Identify the row index with the least nulls in the best column
        best_column = symbol_least_null_column[symbol]
        best_row_index = subset[subset[best_column].notnull()].index[0]  # Get first valid row

        # Update that row with first occurrence status values
        df.loc[best_row_index, best_column] = symbol_first_values[symbol].values[0]
        
        # Mark all other occurrences as duplicate
        df.loc[df.index.isin(subset.index.difference([best_row_index])), 'duplicate'] = True  

# Save the updated DataFrame back to an Excel file
df.to_excel('updated_file.xlsx', index=False)

# Print updated DataFrame
print(df)
