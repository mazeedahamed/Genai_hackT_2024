import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.restassured.response.Response;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import static io.restassured.RestAssured.given;

public class QuickProcessResponse {

    public static void main(String[] args) throws Exception {
        // Making the API call using Rest Assured
        Response apiResponse = given()
                .baseUri("https://example.com/api") // Replace with your API endpoint
                .header("Authorization", "Bearer YOUR_TOKEN") // Add token if required
                .when()
                .get("/endpoint") // Replace with your endpoint
                .then()
                .statusCode(200)
                .extract()
                .response();

        // Initialize Jackson ObjectMapper
        ObjectMapper objectMapper = new ObjectMapper();

        // Parse the JSON response
        JsonNode rootNode = objectMapper.readTree(apiResponse.getBody().asString());

        // Extract metadata
        String number = rootNode.path("workflowMetadata").path("instanceld").asText();
        String keyAccount = rootNode.path("workflowMetadata").path("keyAccount").asText();

        // Extract and process indirect parties
        JsonNode indirectParties = rootNode.path("indirectParties");

        Map<String, Object> keyAccountMap = new HashMap<>();

        Iterator<JsonNode> elements = indirectParties.elements();
        while (elements.hasNext()) {
            JsonNode party = elements.next();

            boolean accepted = party.path("accepted").asBoolean();
            boolean softDelete = party.path("softDelete").asBoolean();
            boolean identifiedByGENAI = party.path("identifiedByGENAI").asBoolean();

            // Calculate expected status directly
            String expectedStatus = calculateExpectedStatus(accepted, softDelete, identifiedByGENAI);

            // Add details for the current party
            keyAccountMap.put("accepted", accepted);
            keyAccountMap.put("softDelete", softDelete);
            keyAccountMap.put("identifiedByGENAI", identifiedByGENAI);
            keyAccountMap.put("Expected Status", expectedStatus);
        }

        // Final Map: {number -> {keyAccount -> party details}}
        Map<String, Map<String, Object>> finalMap = new HashMap<>();
        finalMap.put(number, Map.of(keyAccount, keyAccountMap));

        // Print or return the result
        System.out.println(finalMap);
    }

    /**
     * Calculate the expected status based on the combinations of flags.
     */
    private static String calculateExpectedStatus(boolean accepted, boolean softDelete, boolean identifiedByGENAI) {
        if (!accepted && !softDelete && identifiedByGENAI) return "Identified BY GENAI - Not Accepted Not Deleted";
        if (accepted && !softDelete && identifiedByGENAI) return "Identified BY GENAI - Accepted";
        if (!accepted && softDelete && identifiedByGENAI) return "Identified BY GENAI - Deleted";
        if (accepted && !softDelete && !identifiedByGENAI) return "Manually Added";
        return "Unknown Status";
    }
}
