import pandas as pd
from datetime import datetime

# ðŸŸ¢ Define file paths & sheet names
excel1_path = 'path_to_excel1.xlsx'  # ðŸ”¹ Path to Excel1
excel2_path = 'path_to_excel2.xlsx'  # ðŸ”¹ Path to Excel2
output_path = 'updated_excel1.xlsx'  # ðŸ”¹ Output file name

sheet1_name = 'Sheet1'  # ðŸ”¹ Sheet name in Excel1
sheet2_name = 'Sheet2'  # ðŸ”¹ Sheet name in Excel2

# ðŸŸ¢ Column mappings
id_col1 = 'ID'              # ðŸ”¹ ID column in Excel1
account_col = 'account_id'  # ðŸ”¹ Account ID for grouping
status_col1 = 'Status'      # ðŸ”¹ Status column in Excel1
status_col2 = 'Status'      # ðŸ”¹ Status column in Excel2
comments_col = 'Comments'   # ðŸ”¹ Column for additional filtering
new_status_col = 'Status_excel2'  # ðŸ”¹ New column for updated status

# ðŸŸ¢ Columns to concatenate in Excel2 for generating 'ID'
id_parts = ['TransactionID', 'Name', 'Submitter']

# ðŸŸ¢ Load Excel files
excel1 = pd.read_excel(excel1_path, sheet_name=sheet1_name)
excel2 = pd.read_excel(excel2_path, sheet_name=sheet2_name)

# ðŸŸ¢ Trim whitespace from Excel1 ID column
excel1[id_col1] = excel1[id_col1].astype(str).str.strip()

# ðŸŸ¢ Create ID column in Excel2 by combining three columns
excel2[id_col1] = excel2[id_parts].astype(str).apply(lambda row: '-'.join(row), axis=1)

# ðŸŸ¢ Trim whitespace from newly created ID in Excel2
excel2[id_col1] = excel2[id_col1].str.strip()

# ðŸŸ¢ Handle duplicate statuses in Excel2
excel2[status_col2] = excel2.groupby(id_col1)[status_col2].transform(lambda x: x.mask(x.duplicated(keep='first'), 'Duplicate-' + x))

# ðŸŸ¢ Merge Excel1 with Excel2 based on ID
merged = pd.merge(excel1, excel2[[id_col1, status_col2, comments_col]], on=id_col1, how='left')

# ðŸŸ¢ Add new status column to Excel1's structure
merged[new_status_col] = merged[status_col2].fillna('Missing')

# ðŸŸ¢ Drop the temporary column from Excel2
merged.drop(columns=[status_col2], inplace=True)

# ðŸŸ¢ Identify IDs from Excel2 that are **not in Excel1** (Additional Records)
additional_records = excel2[~excel2[id_col1].isin(excel1[id_col1])].copy()

if not additional_records.empty:
    additional_records[new_status_col] = additional_records[status_col2] + ' - Additional'
    additional_records.drop(columns=[status_col2], inplace=True)

    # ðŸŸ¢ Add missing columns to match Excel1 structure
    for col in excel1.columns:
        if col not in additional_records:
            additional_records[col] = None  # Fill missing columns with NaN

    # ðŸŸ¢ Arrange columns in the same order as Excel1 + new status column
    additional_records = additional_records[excel1.columns.tolist() + [new_status_col]]

    # ðŸŸ¢ Append additional records to the final dataset
    merged = pd.concat([merged, additional_records], ignore_index=True)

# ðŸŸ¢ Generate Summary DataFrame
def generate_summary(df):
    """
    Generates a summary with columns: Account, Correct, Incorrect, Client of Clients, DP.
    """
    summary = df.groupby(account_col)[new_status_col].value_counts().unstack(fill_value=0).reset_index()

    # ðŸŸ¢ Ensure 'Correct' and 'Incorrect' columns exist
    summary['Correct'] = summary.get('Correct', 0)
    summary['Incorrect'] = summary.get('Incorrect', 0)

    # ðŸŸ¢ Identify 'Client of Clients' and 'DP' in Incorrect Status
    incorrect_df = df[df[new_status_col].str.contains('Incorrect', na=False)]
    
    client_of_clients_count = incorrect_df[incorrect_df[comments_col].str.contains('Client of Clients', na=False)].groupby(account_col).size()
    dp_count = incorrect_df[incorrect_df[comments_col].str.contains('DP', na=False)].groupby(account_col).size()

    # ðŸŸ¢ Add these counts to summary
    summary['Client of Clients'] = summary[account_col].map(client_of_clients_count).fillna(0).astype(int)
    summary['DP'] = summary[account_col].map(dp_count).fillna(0).astype(int)

    # ðŸŸ¢ Select relevant columns
    summary = summary[[account_col, 'Correct', 'Incorrect', 'Client of Clients', 'DP']]
    
    return summary

# ðŸŸ¢ Create summary sheet name
summary_sheet_name = f"Summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

# ðŸŸ¢ Save the final data to a new Excel file
with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
    merged.to_excel(writer, sheet_name=sheet1_name, index=False)  # âœ… Update existing sheet
    generate_summary(merged).to_excel(writer, sheet_name=summary_sheet_name, index=False)  # âœ… Write summary in new sheet

print(f"âœ… Excel file '{output_path}' updated successfully with new column '{new_status_col}' and summary in sheet '{summary_sheet_name}'!")
