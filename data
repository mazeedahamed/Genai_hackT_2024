import pandas as pd
import os
from datetime import datetime

# === CONFIGURATION ===
excel1_path = "excel1.xlsx"
excel2_path = "excel2.xlsx"
sheet_name = "sheet1"

# Columns for comparison
columns_to_compare = ["Transactionid", "number", "name", "type", "country"]
status_column = "status"
new_status_column = "new_status"

# Status labels
STATUS_CORRECT = "Correct and complete"
STATUS_INCOMPLETE = "Incomplete"
STATUS_INCORRECT = "Incorrect"
STATUS_NEW_PARTY = "New Party Incorrect"
STATUS_VALID_DROP = "Valid Drop"
STATUS_MISSING = "Missing"

try:
    # Check if files exist
    if not os.path.exists(excel1_path) or not os.path.exists(excel2_path):
        raise FileNotFoundError("One or both Excel files are missing!")

    # Load the full Excel1 workbook with all sheets
    excel1_sheets = pd.read_excel(excel1_path, sheet_name=None, dtype=str)

    # Load only sheet1 from both files
    df1 = excel1_sheets[sheet_name]
    df2 = pd.read_excel(excel2_path, sheet_name=sheet_name, dtype=str)

    # Ensure all required columns exist
    required_columns = set(columns_to_compare + [status_column])
    missing_columns_df1 = required_columns - set(df1.columns)
    missing_columns_df2 = required_columns - set(df2.columns)

    if missing_columns_df1 or missing_columns_df2:
        raise ValueError(f"Missing columns: {missing_columns_df1} in df1, {missing_columns_df2} in df2")

    # Assign occurrence numbers
    df1['occurrence'] = df1.groupby(columns_to_compare).cumcount() + 1
    df2['occurrence'] = df2.groupby(columns_to_compare).cumcount() + 1

    # Merge both DataFrames on key columns and occurrences
    merged_df = df1.merge(df2, on=columns_to_compare + ['occurrence'], how="outer", suffixes=("_df1", "_df2"), indicator=True)

    # Initialize new_status column with the existing status from df1
    merged_df[new_status_column] = merged_df.get("status_df1", "")

    # Vectorized status assignment
    merged_df.loc[merged_df["_merge"] == "right_only", new_status_column] = STATUS_NEW_PARTY
    merged_df.loc[(merged_df["_merge"] == "left_only") & merged_df["status_df1"].isin([STATUS_CORRECT, STATUS_INCOMPLETE]), new_status_column] = STATUS_MISSING
    merged_df.loc[(merged_df["_merge"] == "left_only") & (merged_df["status_df1"] == STATUS_INCORRECT), new_status_column] = STATUS_VALID_DROP

    # Drop unnecessary columns
    merged_df.drop(columns=["_merge"], inplace=True, errors="ignore")

    # Update existing rows in df1 with new_status
    df1_updated = df1.merge(
        merged_df[[*columns_to_compare, "occurrence", new_status_column]],
        on=[*columns_to_compare, "occurrence"],
        how="left"
    )

    # Replace original status column with updated new_status
    df1_updated[status_column] = df1_updated[new_status_column]
    df1_updated.drop(columns=[new_status_column], inplace=True)

    # Extract only the "New Party Incorrect" rows to be appended
    new_party_rows = merged_df[merged_df[new_status_column] == STATUS_NEW_PARTY].drop(columns=["status_df1"], errors="ignore")

    # Append "New Party Incorrect" rows
    df1_final = pd.concat([df1_updated, new_party_rows], ignore_index=True)

    # Save back to the same Excel file with all original sheets intact
    with pd.ExcelWriter(excel1_path, engine="xlsxwriter") as writer:
        for sheet, data in excel1_sheets.items():
            if sheet == sheet_name:
                df1_final.to_excel(writer, sheet_name=sheet, index=False)  # Update sheet1
            else:
                data.to_excel(writer, sheet_name=sheet, index=False)  # Keep other sheets unchanged

    print("✅ Excel file updated successfully!")

except FileNotFoundError as e:
    print(f"❌ Error: {e}")

except ValueError as e:
    print(f"❌ Error: {e}")

except Exception as e:
    print(f"❌ An unexpected error occurred: {e}")
