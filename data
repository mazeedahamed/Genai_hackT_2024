private static void processApiResponse(Response apiResponse) {
    try {
        // Check if the response is null or empty before proceeding
        if (apiResponse == null || apiResponse.getBody().asString().isEmpty()) {
            System.err.println("Empty or null response received. Skipping...");
            return; // Skip processing
        }

        // Check if the response contains the expected structure (indirectParties)
        List<Map<String, Object>> indirectParties = apiResponse.jsonPath().getList("indirectParties");
        if (indirectParties == null || indirectParties.isEmpty()) {
            System.err.println("No indirectParties found in the response. Skipping...");
            return; // Skip processing
        }

        // Iterate over indirect parties and process each one
        for (Map<String, Object> party : indirectParties) {
            String keyAccount = (String) party.get("keyAccount");
            if (keyAccount == null || keyAccount.isEmpty()) {
                System.err.println("Missing keyAccount. Skipping this entry...");
                continue; // Skip this entry if keyAccount is missing or invalid
            }

            boolean accepted = (boolean) party.get("accepted");
            boolean softDelete = (boolean) party.get("softDelete");
            boolean identifiedByGENAI = (boolean) party.get("identifiedByGENAI");

            // Determine the expected status
            String expectedStatus = determineExpectedStatus(accepted, softDelete, identifiedByGENAI);

            // Extract documentIds using jsonPath()
            List<String> documentIds = apiResponse.jsonPath().getList("indirectParties.sourcelnfo.documentId");

            // Add data to global map
            Map<String, Object> partyData = new HashMap<>();
            partyData.put("accepted", accepted);
            partyData.put("softDelete", softDelete);
            partyData.put("identifiedByGENAI", identifiedByGENAI);
            partyData.put("expectedStatus", expectedStatus);
            partyData.put("documentIds", documentIds);

            Map<String, Map<String, Object>> keyAccountData = new HashMap<>();
            keyAccountData.put(keyAccount, partyData);

            globalMap.put(String.valueOf(party.get("instanceld")), keyAccountData);
        }
    } catch (Exception e) {
        System.err.println("Error processing API response: " + e.getMessage());
        e.printStackTrace();
    }
}
