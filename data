import io.restassured.response.Response;
import io.restassured.RestAssured;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.util.*;

public class ResilientProcessResponse {

    private static Map<String, Map<String, Map<String, Object>>> globalMap = new HashMap<>();

    public static void main(String[] args) {
        Response apiResponse = getApiResponse("https://example.com/api/endpoint");

        if (apiResponse != null) {
            processApiResponse(apiResponse);
            writeToExcel();
        }
    }

    private static void processApiResponse(Response apiResponse) {
        try {
            // Extract keyAccount and indirectParties
            List<Map<String, Object>> indirectParties = apiResponse.jsonPath().getList("indirectParties");

            // Iterate over indirect parties and process each one
            for (Map<String, Object> party : indirectParties) {
                String keyAccount = (String) party.get("keyAccount");
                boolean accepted = (boolean) party.get("accepted");
                boolean softDelete = (boolean) party.get("softDelete");
                boolean identifiedByGENAI = (boolean) party.get("identifiedByGENAI");

                // Determine the expected status
                String expectedStatus = determineExpectedStatus(accepted, softDelete, identifiedByGENAI);

                // Extract documentIds using jsonPath()
                List<String> documentIds = apiResponse.jsonPath().getList("indirectParties.sourcelnfo.documentId");

                // Add data to global map
                Map<String, Object> partyData = new HashMap<>();
                partyData.put("accepted", accepted);
                partyData.put("softDelete", softDelete);
                partyData.put("identifiedByGENAI", identifiedByGENAI);
                partyData.put("expectedStatus", expectedStatus);
                partyData.put("documentIds", documentIds);

                Map<String, Map<String, Object>> keyAccountData = new HashMap<>();
                keyAccountData.put(keyAccount, partyData);

                globalMap.put(String.valueOf(party.get("instanceld")), keyAccountData);
            }
        } catch (Exception e) {
            System.err.println("Error processing API response: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static String determineExpectedStatus(boolean accepted, boolean softDelete, boolean identifiedByGENAI) {
        if (!accepted && !softDelete && identifiedByGENAI) {
            return "Identified BY GENAI - Not Accepted Not Deleted";
        } else if (!accepted && softDelete && identifiedByGENAI) {
            return "Identified BY GENAI - Accepted";
        } else if (accepted && softDelete && identifiedByGENAI) {
            return "Identified BY GENAI - Deleted";
        } else if (accepted && !softDelete && !identifiedByGENAI) {
            return "Manually Added";
        }
        return "Unknown Status";
    }

    private static Response getApiResponse(String apiUrl) {
        return RestAssured.given()
                .baseUri(apiUrl)
                .header("Authorization", "Bearer YOUR_TOKEN")
                .when()
                .get()
                .then()
                .statusCode(200)
                .extract()
                .response();
    }

    private static void writeToExcel() {
        try (XSSFWorkbook workbook = new XSSFWorkbook()) {
            XSSFSheet sheet = workbook.createSheet("API Response Data");

            // Define headers
            String[] headers = {"Number", "KeyAccount", "Accepted", "SoftDelete", "IdentifiedByGENAI", "Expected Status", "Document Ids"};
            int rowNum = 0;
            var headerRow = sheet.createRow(rowNum++);

            // Populate headers in Excel
            for (int i = 0; i < headers.length; i++) {
                headerRow.createCell(i).setCellValue(headers[i]);
            }

            // Populate data from globalMap
            for (Map.Entry<String, Map<String, Map<String, Object>>> entry : globalMap.entrySet()) {
                String number = entry.getKey();
                Map<String, Map<String, Object>> keyAccountData = entry.getValue();
                for (Map.Entry<String, Map<String, Object>> innerEntry : keyAccountData.entrySet()) {
                    String keyAccount = innerEntry.getKey();
                    Map<String, Object> data = innerEntry.getValue();

                    // Create a new row for each entry
                    var row = sheet.createRow(rowNum++);

                    // Populate cells with corresponding data
                    row.createCell(0).setCellValue(number);
                    row.createCell(1).setCellValue(keyAccount);
                    row.createCell(2).setCellValue((boolean) data.get("accepted"));
                    row.createCell(3).setCellValue((boolean) data.get("softDelete"));
                    row.createCell(4).setCellValue((boolean) data.get("identifiedByGENAI"));
                    row.createCell(5).setCellValue((String) data.get("expectedStatus"));
                    row.createCell(6).setCellValue(String.join(",", (List<String>) data.get("documentIds")));
                }
            }

            // Write to file
            try (FileOutputStream fileOut = new FileOutputStream("API_Response_Data.xlsx")) {
                workbook.write(fileOut);
            }
        } catch (Exception e) {
            System.err.println("Error writing to Excel: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
